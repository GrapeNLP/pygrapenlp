# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pygrape', [dirname(__file__)])
        except ImportError:
            import _pygrape
            return _pygrape
        if fp is not None:
            try:
                _mod = imp.load_module('_pygrape', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pygrape = swig_import_helper()
    del swig_import_helper
else:
    import _pygrape
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pygrape.STD_swigconstant(_pygrape)
STD = _pygrape.STD

_pygrape.LRB_TREE_swigconstant(_pygrape)
LRB_TREE = _pygrape.LRB_TREE

_pygrape.LRB_TREE_3W_swigconstant(_pygrape)
LRB_TREE_3W = _pygrape.LRB_TREE_3W

_pygrape.LEXMASK_X_LETTER_ARRAY_RTNO_swigconstant(_pygrape)
LEXMASK_X_LETTER_ARRAY_RTNO = _pygrape.LEXMASK_X_LETTER_ARRAY_RTNO

_pygrape.LEXMASK_X_WEIGHTED_LETTER_ARRAY_RTNO_swigconstant(_pygrape)
LEXMASK_X_WEIGHTED_LETTER_ARRAY_RTNO = _pygrape.LEXMASK_X_WEIGHTED_LETTER_ARRAY_RTNO

_pygrape.LEXMASK_X_EXTRACTION_RTNO_swigconstant(_pygrape)
LEXMASK_X_EXTRACTION_RTNO = _pygrape.LEXMASK_X_EXTRACTION_RTNO

_pygrape.LEXMASK_X_WEIGHTED_EXTRACTION_RTNO_swigconstant(_pygrape)
LEXMASK_X_WEIGHTED_EXTRACTION_RTNO = _pygrape.LEXMASK_X_WEIGHTED_EXTRACTION_RTNO

_pygrape.LEXMASK_X_BRACKETING_RTNO_swigconstant(_pygrape)
LEXMASK_X_BRACKETING_RTNO = _pygrape.LEXMASK_X_BRACKETING_RTNO

_pygrape.LEXMASK_X_WEIGHTED_BRACKETING_RTNO_swigconstant(_pygrape)
LEXMASK_X_WEIGHTED_BRACKETING_RTNO = _pygrape.LEXMASK_X_WEIGHTED_BRACKETING_RTNO

_pygrape.DEPTH_FIRST_RTNO_PARSER_swigconstant(_pygrape)
DEPTH_FIRST_RTNO_PARSER = _pygrape.DEPTH_FIRST_RTNO_PARSER

_pygrape.BREADTH_FIRST_RTNO_PARSER_swigconstant(_pygrape)
BREADTH_FIRST_RTNO_PARSER = _pygrape.BREADTH_FIRST_RTNO_PARSER

_pygrape.EARLEY_RTNO_PARSER_swigconstant(_pygrape)
EARLEY_RTNO_PARSER = _pygrape.EARLEY_RTNO_PARSER

_pygrape.TO_FPRTN_RTNO_PARSER_swigconstant(_pygrape)
TO_FPRTN_RTNO_PARSER = _pygrape.TO_FPRTN_RTNO_PARSER

_pygrape.TO_FPRTN_ZPPS_RTNO_PARSER_swigconstant(_pygrape)
TO_FPRTN_ZPPS_RTNO_PARSER = _pygrape.TO_FPRTN_ZPPS_RTNO_PARSER

_pygrape.TO_FPRTN_TOP_RTNO_PARSER_swigconstant(_pygrape)
TO_FPRTN_TOP_RTNO_PARSER = _pygrape.TO_FPRTN_TOP_RTNO_PARSER

_pygrape.TO_FPRTN_AND_BREADTH_FIRST_EXPAND_RTNO_PARSER_swigconstant(_pygrape)
TO_FPRTN_AND_BREADTH_FIRST_EXPAND_RTNO_PARSER = _pygrape.TO_FPRTN_AND_BREADTH_FIRST_EXPAND_RTNO_PARSER

_pygrape.TO_FPRTN_AND_BLACKBOARD_SET_EXPAND_RTNO_PARSER_swigconstant(_pygrape)
TO_FPRTN_AND_BLACKBOARD_SET_EXPAND_RTNO_PARSER = _pygrape.TO_FPRTN_AND_BLACKBOARD_SET_EXPAND_RTNO_PARSER

_pygrape.TO_FPRTN_AND_TOP_BLACKBOARD_EXTRACT_RTNO_PARSER_swigconstant(_pygrape)
TO_FPRTN_AND_TOP_BLACKBOARD_EXTRACT_RTNO_PARSER = _pygrape.TO_FPRTN_AND_TOP_BLACKBOARD_EXTRACT_RTNO_PARSER

def new_byte_array(nelements: 'size_t') -> "unsigned char *":
    return _pygrape.new_byte_array(nelements)
new_byte_array = _pygrape.new_byte_array

def delete_byte_array(ary: 'unsigned char *') -> "void":
    return _pygrape.delete_byte_array(ary)
delete_byte_array = _pygrape.delete_byte_array

def byte_array_getitem(ary: 'unsigned char *', index: 'size_t') -> "unsigned char":
    return _pygrape.byte_array_getitem(ary, index)
byte_array_getitem = _pygrape.byte_array_getitem

def byte_array_setitem(ary: 'unsigned char *', index: 'size_t', value: 'unsigned char') -> "void":
    return _pygrape.byte_array_setitem(ary, index, value)
byte_array_setitem = _pygrape.byte_array_setitem
class u_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, u_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, u_array, name)
    __repr__ = _swig_repr

    def __init__(self, count_: 'grape::array< unsigned short >::size_type'):
        this = _pygrape.new_u_array(count_)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygrape.delete_u_array
    __del__ = lambda self: None

    def size(self) -> "grape::array< unsigned short >::size_type":
        return _pygrape.u_array_size(self)

    def size_in_bytes(self) -> "grape::array< unsigned short >::size_type":
        return _pygrape.u_array_size_in_bytes(self)

    def empty(self) -> "bool":
        return _pygrape.u_array_empty(self)

    def begin(self) -> "grape::array< unsigned short >::iterator":
        return _pygrape.u_array_begin(self)

    def const_begin(self) -> "grape::array< unsigned short >::const_iterator":
        return _pygrape.u_array_const_begin(self)

    def const_end(self) -> "grape::array< unsigned short >::const_iterator":
        return _pygrape.u_array_const_end(self)

    def get_bytes(self) -> "unsigned char const *":
        return _pygrape.u_array_get_bytes(self)

    def set_bytes(self, bytes: 'unsigned char *') -> "void":
        return _pygrape.u_array_set_bytes(self, bytes)

    def get_elem_at(self, i: 'grape::array< unsigned short >::size_type') -> "unsigned short const &":
        return _pygrape.u_array_get_elem_at(self, i)
u_array_swigregister = _pygrape.u_array_swigregister
u_array_swigregister(u_array)

class u_trie_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, u_trie_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, u_trie_string, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self) -> "grape::trie< unsigned short >::size_type":
        return _pygrape.u_trie_string_size(self)

    def to_array(self, a: 'u_array') -> "grape::array< unsigned short > &":
        return _pygrape.u_trie_string_to_array(self, a)

    def back(self) -> "unsigned short":
        return _pygrape.u_trie_string_back(self)
u_trie_string_swigregister = _pygrape.u_trie_string_swigregister
u_trie_string_swigregister(u_trie_string)

class u_trie(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, u_trie, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, u_trie, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygrape.new_u_trie()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygrape.delete_u_trie
    __del__ = lambda self: None
u_trie_swigregister = _pygrape.u_trie_swigregister
u_trie_swigregister(u_trie)

class u_out_bound(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, u_out_bound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, u_out_bound, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pygrape.u_out_bound_name_set
    __swig_getmethods__["name"] = _pygrape.u_out_bound_name_get
    if _newclass:
        name = _swig_property(_pygrape.u_out_bound_name_get, _pygrape.u_out_bound_name_set)
    __swig_setmethods__["left"] = _pygrape.u_out_bound_left_set
    __swig_getmethods__["left"] = _pygrape.u_out_bound_left_get
    if _newclass:
        left = _swig_property(_pygrape.u_out_bound_left_get, _pygrape.u_out_bound_left_set)
    __swig_setmethods__["right"] = _pygrape.u_out_bound_right_set
    __swig_getmethods__["right"] = _pygrape.u_out_bound_right_get
    if _newclass:
        right = _swig_property(_pygrape.u_out_bound_right_get, _pygrape.u_out_bound_right_set)

    def __init__(self, *args):
        this = _pygrape.new_u_out_bound(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __lt__(self, ob: 'u_out_bound') -> "bool":
        return _pygrape.u_out_bound___lt__(self, ob)

    def __eq__(self, ob: 'u_out_bound') -> "bool":
        return _pygrape.u_out_bound___eq__(self, ob)
u_out_bound_swigregister = _pygrape.u_out_bound_swigregister
u_out_bound_swigregister(u_out_bound)

class u_out_bound_const_ref_triplet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, u_out_bound_const_ref_triplet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, u_out_bound_const_ref_triplet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygrape.new_u_out_bound_const_ref_triplet()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def get(self, name: 'u_out_bound_name_string', left: 'bool', right: 'bool') -> "grape::out_bound< unsigned short >::const_ref":
        return _pygrape.u_out_bound_const_ref_triplet_get(self, name, left, right)
    __swig_destroy__ = _pygrape.delete_u_out_bound_const_ref_triplet
    __del__ = lambda self: None
u_out_bound_const_ref_triplet_swigregister = _pygrape.u_out_bound_const_ref_triplet_swigregister
u_out_bound_const_ref_triplet_swigregister(u_out_bound_const_ref_triplet)

class base_u_out_bound_name_string(u_trie_string):
    __swig_setmethods__ = {}
    for _s in [u_trie_string]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, base_u_out_bound_name_string, name, value)
    __swig_getmethods__ = {}
    for _s in [u_trie_string]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, base_u_out_bound_name_string, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _pygrape.base_u_out_bound_name_string_data_set
    __swig_getmethods__["data"] = _pygrape.base_u_out_bound_name_string_data_get
    if _newclass:
        data = _swig_property(_pygrape.base_u_out_bound_name_string_data_get, _pygrape.base_u_out_bound_name_string_data_set)
base_u_out_bound_name_string_swigregister = _pygrape.base_u_out_bound_name_string_swigregister
base_u_out_bound_name_string_swigregister(base_u_out_bound_name_string)

class base_u_out_bound_trie(u_trie):
    __swig_setmethods__ = {}
    for _s in [u_trie]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, base_u_out_bound_trie, name, value)
    __swig_getmethods__ = {}
    for _s in [u_trie]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, base_u_out_bound_trie, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygrape.new_base_u_out_bound_trie()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygrape.delete_base_u_out_bound_trie
    __del__ = lambda self: None
base_u_out_bound_trie_swigregister = _pygrape.base_u_out_bound_trie_swigregister
base_u_out_bound_trie_swigregister(base_u_out_bound_trie)

class u_out_bound_name_string(base_u_out_bound_name_string):
    __swig_setmethods__ = {}
    for _s in [base_u_out_bound_name_string]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, u_out_bound_name_string, name, value)
    __swig_getmethods__ = {}
    for _s in [base_u_out_bound_name_string]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, u_out_bound_name_string, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygrape.new_u_out_bound_name_string()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygrape.delete_u_out_bound_name_string
    __del__ = lambda self: None
u_out_bound_name_string_swigregister = _pygrape.u_out_bound_name_string_swigregister
u_out_bound_name_string_swigregister(u_out_bound_name_string)

class u_out_bound_trie(base_u_out_bound_trie):
    __swig_setmethods__ = {}
    for _s in [base_u_out_bound_trie]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, u_out_bound_trie, name, value)
    __swig_getmethods__ = {}
    for _s in [base_u_out_bound_trie]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, u_out_bound_trie, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygrape.new_u_out_bound_trie()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygrape.delete_u_out_bound_trie
    __del__ = lambda self: None
u_out_bound_trie_swigregister = _pygrape.u_out_bound_trie_swigregister
u_out_bound_trie_swigregister(u_out_bound_trie)

class uau_simple_segment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uau_simple_segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uau_simple_segment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pygrape.uau_simple_segment_name_set
    __swig_getmethods__["name"] = _pygrape.uau_simple_segment_name_get
    if _newclass:
        name = _swig_property(_pygrape.uau_simple_segment_name_get, _pygrape.uau_simple_segment_name_set)
    __swig_setmethods__["begin"] = _pygrape.uau_simple_segment_begin_set
    __swig_getmethods__["begin"] = _pygrape.uau_simple_segment_begin_get
    if _newclass:
        begin = _swig_property(_pygrape.uau_simple_segment_begin_get, _pygrape.uau_simple_segment_begin_set)
    __swig_setmethods__["end"] = _pygrape.uau_simple_segment_end_set
    __swig_getmethods__["end"] = _pygrape.uau_simple_segment_end_get
    if _newclass:
        end = _swig_property(_pygrape.uau_simple_segment_end_get, _pygrape.uau_simple_segment_end_set)

    def __init__(self):
        this = _pygrape.new_uau_simple_segment()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygrape.delete_uau_simple_segment
    __del__ = lambda self: None
uau_simple_segment_swigregister = _pygrape.uau_simple_segment_swigregister
uau_simple_segment_swigregister(uau_simple_segment)

class uau_simple_segment_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uau_simple_segment_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uau_simple_segment_array, name)
    __repr__ = _swig_repr

    def __init__(self, count_: 'grape::array< grape::simple_segment< unsigned short const *,unsigned short > >::size_type'):
        this = _pygrape.new_uau_simple_segment_array(count_)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygrape.delete_uau_simple_segment_array
    __del__ = lambda self: None

    def size(self) -> "grape::array< grape::simple_segment< unsigned short const *,unsigned short > >::size_type":
        return _pygrape.uau_simple_segment_array_size(self)

    def size_in_bytes(self) -> "grape::array< grape::simple_segment< unsigned short const *,unsigned short > >::size_type":
        return _pygrape.uau_simple_segment_array_size_in_bytes(self)

    def empty(self) -> "bool":
        return _pygrape.uau_simple_segment_array_empty(self)

    def begin(self) -> "grape::array< grape::simple_segment< unsigned short const *,unsigned short > >::iterator":
        return _pygrape.uau_simple_segment_array_begin(self)

    def const_begin(self) -> "grape::array< grape::simple_segment< unsigned short const *,unsigned short > >::const_iterator":
        return _pygrape.uau_simple_segment_array_const_begin(self)

    def const_end(self) -> "grape::array< grape::simple_segment< unsigned short const *,unsigned short > >::const_iterator":
        return _pygrape.uau_simple_segment_array_const_end(self)

    def get_bytes(self) -> "unsigned char const *":
        return _pygrape.uau_simple_segment_array_get_bytes(self)

    def set_bytes(self, bytes: 'unsigned char *') -> "void":
        return _pygrape.uau_simple_segment_array_set_bytes(self, bytes)

    def get_elem_at(self, i: 'grape::array< grape::simple_segment< unsigned short const *,unsigned short > >::size_type') -> "::grape::simple_segment< unsigned short const *,unsigned short > const &":
        return _pygrape.uau_simple_segment_array_get_elem_at(self, i)
uau_simple_segment_array_swigregister = _pygrape.uau_simple_segment_array_swigregister
uau_simple_segment_array_swigregister(uau_simple_segment_array)

class uaui_simple_segment_array_x_weight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uaui_simple_segment_array_x_weight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uaui_simple_segment_array_x_weight, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ssa"] = _pygrape.uaui_simple_segment_array_x_weight_ssa_set
    __swig_getmethods__["ssa"] = _pygrape.uaui_simple_segment_array_x_weight_ssa_get
    if _newclass:
        ssa = _swig_property(_pygrape.uaui_simple_segment_array_x_weight_ssa_get, _pygrape.uaui_simple_segment_array_x_weight_ssa_set)
    __swig_setmethods__["w"] = _pygrape.uaui_simple_segment_array_x_weight_w_set
    __swig_getmethods__["w"] = _pygrape.uaui_simple_segment_array_x_weight_w_get
    if _newclass:
        w = _swig_property(_pygrape.uaui_simple_segment_array_x_weight_w_get, _pygrape.uaui_simple_segment_array_x_weight_w_set)

    def __init__(self):
        this = _pygrape.new_uaui_simple_segment_array_x_weight()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygrape.delete_uaui_simple_segment_array_x_weight
    __del__ = lambda self: None
uaui_simple_segment_array_x_weight_swigregister = _pygrape.uaui_simple_segment_array_x_weight_swigregister
uaui_simple_segment_array_x_weight_swigregister(uaui_simple_segment_array_x_weight)

class uaui_simple_segment_array_x_weight_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uaui_simple_segment_array_x_weight_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uaui_simple_segment_array_x_weight_array, name)
    __repr__ = _swig_repr

    def __init__(self, count_: 'grape::array< grape::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type'):
        this = _pygrape.new_uaui_simple_segment_array_x_weight_array(count_)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygrape.delete_uaui_simple_segment_array_x_weight_array
    __del__ = lambda self: None

    def size(self) -> "grape::array< grape::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type":
        return _pygrape.uaui_simple_segment_array_x_weight_array_size(self)

    def size_in_bytes(self) -> "grape::array< grape::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type":
        return _pygrape.uaui_simple_segment_array_x_weight_array_size_in_bytes(self)

    def empty(self) -> "bool":
        return _pygrape.uaui_simple_segment_array_x_weight_array_empty(self)

    def begin(self) -> "grape::array< grape::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::iterator":
        return _pygrape.uaui_simple_segment_array_x_weight_array_begin(self)

    def const_begin(self) -> "grape::array< grape::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::const_iterator":
        return _pygrape.uaui_simple_segment_array_x_weight_array_const_begin(self)

    def const_end(self) -> "grape::array< grape::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::const_iterator":
        return _pygrape.uaui_simple_segment_array_x_weight_array_const_end(self)

    def get_bytes(self) -> "unsigned char const *":
        return _pygrape.uaui_simple_segment_array_x_weight_array_get_bytes(self)

    def set_bytes(self, bytes: 'unsigned char *') -> "void":
        return _pygrape.uaui_simple_segment_array_x_weight_array_set_bytes(self, bytes)

    def get_elem_at(self, i: 'grape::array< grape::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type') -> "::grape::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > const &":
        return _pygrape.uaui_simple_segment_array_x_weight_array_get_elem_at(self, i)
uaui_simple_segment_array_x_weight_array_swigregister = _pygrape.uaui_simple_segment_array_x_weight_array_swigregister
uaui_simple_segment_array_x_weight_array_swigregister(uaui_simple_segment_array_x_weight_array)

class ualxiw_manager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ualxiw_manager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ualxiw_manager, name)
    __repr__ = _swig_repr

    def __init__(self, grammar_type_: 'grape::rtno_type', grammar_path_name: 'std::string const &', dico_path_name: 'std::string const &'):
        this = _pygrape.new_ualxiw_manager(grammar_type_, grammar_path_name, dico_path_name)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygrape.delete_ualxiw_manager
    __del__ = lambda self: None

    def get_simplified_weighted_output(self) -> "::grape::uaui_simple_segment_array_x_weight_array const &":
        return _pygrape.ualxiw_manager_get_simplified_weighted_output(self)

    def process(self, input_begin: 'grape::ua_input_iterator', input_end: 'grape::ua_input_iterator', the_rtno_parser_type: 'grape::rtno_parser_type', trie_strings: 'bool', no_output: 'bool', the_execution_state_set_impl_choice: 'grape::assoc_container_impl_choice', the_output_set_impl_choice: 'grape::assoc_container_impl_choice') -> "void":
        return _pygrape.ualxiw_manager_process(self, input_begin, input_end, the_rtno_parser_type, trie_strings, no_output, the_execution_state_set_impl_choice, the_output_set_impl_choice)
ualxiw_manager_swigregister = _pygrape.ualxiw_manager_swigregister
ualxiw_manager_swigregister(ualxiw_manager)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pygrape.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _pygrape.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _pygrape.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _pygrape.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _pygrape.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _pygrape.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _pygrape.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _pygrape.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _pygrape.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _pygrape.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _pygrape.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _pygrape.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _pygrape.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _pygrape.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _pygrape.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _pygrape.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _pygrape.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pygrape.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class u_trie_with_bool_data_string(u_trie_string):
    __swig_setmethods__ = {}
    for _s in [u_trie_string]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, u_trie_with_bool_data_string, name, value)
    __swig_getmethods__ = {}
    for _s in [u_trie_string]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, u_trie_with_bool_data_string, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _pygrape.u_trie_with_bool_data_string_data_set
    __swig_getmethods__["data"] = _pygrape.u_trie_with_bool_data_string_data_get
    if _newclass:
        data = _swig_property(_pygrape.u_trie_with_bool_data_string_data_get, _pygrape.u_trie_with_bool_data_string_data_set)
u_trie_with_bool_data_string_swigregister = _pygrape.u_trie_with_bool_data_string_swigregister
u_trie_with_bool_data_string_swigregister(u_trie_with_bool_data_string)

class u_trie_with_bool_data(u_trie):
    __swig_setmethods__ = {}
    for _s in [u_trie]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, u_trie_with_bool_data, name, value)
    __swig_getmethods__ = {}
    for _s in [u_trie]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, u_trie_with_bool_data, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygrape.new_u_trie_with_bool_data()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygrape.delete_u_trie_with_bool_data
    __del__ = lambda self: None
u_trie_with_bool_data_swigregister = _pygrape.u_trie_with_bool_data_swigregister
u_trie_with_bool_data_swigregister(u_trie_with_bool_data)

class u_trie_with_def_false_bool_data_string(u_trie_with_bool_data_string):
    __swig_setmethods__ = {}
    for _s in [u_trie_with_bool_data_string]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, u_trie_with_def_false_bool_data_string, name, value)
    __swig_getmethods__ = {}
    for _s in [u_trie_with_bool_data_string]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, u_trie_with_def_false_bool_data_string, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
u_trie_with_def_false_bool_data_string_swigregister = _pygrape.u_trie_with_def_false_bool_data_string_swigregister
u_trie_with_def_false_bool_data_string_swigregister(u_trie_with_def_false_bool_data_string)

class u_trie_with_def_false_bool_data(u_trie_with_bool_data):
    __swig_setmethods__ = {}
    for _s in [u_trie_with_bool_data]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, u_trie_with_def_false_bool_data, name, value)
    __swig_getmethods__ = {}
    for _s in [u_trie_with_bool_data]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, u_trie_with_def_false_bool_data, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygrape.new_u_trie_with_def_false_bool_data()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygrape.delete_u_trie_with_def_false_bool_data
    __del__ = lambda self: None
u_trie_with_def_false_bool_data_swigregister = _pygrape.u_trie_with_def_false_bool_data_swigregister
u_trie_with_def_false_bool_data_swigregister(u_trie_with_def_false_bool_data)

class u_set_trie_const_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, u_set_trie_const_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, u_set_trie_const_iterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygrape.new_u_set_trie_const_iterator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __ref__(self) -> "unsigned short const &":
        return _pygrape.u_set_trie_const_iterator___ref__(self)
    __swig_destroy__ = _pygrape.delete_u_set_trie_const_iterator
    __del__ = lambda self: None
u_set_trie_const_iterator_swigregister = _pygrape.u_set_trie_const_iterator_swigregister
u_set_trie_const_iterator_swigregister(u_set_trie_const_iterator)


def u_set_trie_const_iterator(self):
    if self.has_next():
        elem = self.__deref__()
        self.__preinc__()
        return elem
    raise StopIteration()

u_set_trie_const_iterator.next = u_set_trie_const_iterator

class u_set_trie(u_trie_with_def_false_bool_data):
    __swig_setmethods__ = {}
    for _s in [u_trie_with_def_false_bool_data]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, u_set_trie, name, value)
    __swig_getmethods__ = {}
    for _s in [u_trie_with_def_false_bool_data]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, u_set_trie, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygrape.new_u_set_trie()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def size(self) -> "grape::trie< unsigned short >::size_type":
        return _pygrape.u_set_trie_size(self)

    def empty(self) -> "bool":
        return _pygrape.u_set_trie_empty(self)

    def add(self, elem: 'unsigned short const &') -> "grape::set_trie< unsigned short >::string &":
        return _pygrape.u_set_trie_add(self, elem)

    def begin(self) -> "grape::set_trie_const_iterator< unsigned short >":
        return _pygrape.u_set_trie_begin(self)

    def end(self) -> "grape::set_trie_const_iterator< unsigned short >":
        return _pygrape.u_set_trie_end(self)
    __swig_destroy__ = _pygrape.delete_u_set_trie
    __del__ = lambda self: None
u_set_trie_swigregister = _pygrape.u_set_trie_swigregister
u_set_trie_swigregister(u_set_trie)


def u_set_trie_string_deref(s: 'u_trie_with_def_false_bool_data_string') -> "grape::u_trie_with_def_false_bool_data_string &":
    return _pygrape.u_set_trie_string_deref(s)
u_set_trie_string_deref = _pygrape.u_set_trie_string_deref
class inf_delaf_entry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, inf_delaf_entry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, inf_delaf_entry, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["semantic_traits"] = _pygrape.inf_delaf_entry_semantic_traits_get
    if _newclass:
        semantic_traits = _swig_property(_pygrape.inf_delaf_entry_semantic_traits_get)
inf_delaf_entry_swigregister = _pygrape.inf_delaf_entry_swigregister
inf_delaf_entry_swigregister(inf_delaf_entry)

class ust_set(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ust_set, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ust_set, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pygrape.ust_set_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pygrape.ust_set___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pygrape.ust_set___bool__(self)

    def __len__(self) -> "std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::size_type":
        return _pygrape.ust_set___len__(self)

    def append(self, x: 'u_trie_with_def_false_bool_data_string') -> "void":
        return _pygrape.ust_set_append(self, x)

    def __contains__(self, x: 'u_trie_with_def_false_bool_data_string') -> "bool":
        return _pygrape.ust_set___contains__(self, x)

    def __getitem__(self, i: 'std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::difference_type') -> "std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::value_type":
        return _pygrape.ust_set___getitem__(self, i)

    def add(self, x: 'u_trie_with_def_false_bool_data_string') -> "void":
        return _pygrape.ust_set_add(self, x)

    def discard(self, x: 'u_trie_with_def_false_bool_data_string') -> "void":
        return _pygrape.ust_set_discard(self, x)

    def __init__(self, *args):
        this = _pygrape.new_ust_set(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self) -> "bool":
        return _pygrape.ust_set_empty(self)

    def size(self) -> "std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::size_type":
        return _pygrape.ust_set_size(self)

    def clear(self) -> "void":
        return _pygrape.ust_set_clear(self)

    def swap(self, v: 'ust_set') -> "void":
        return _pygrape.ust_set_swap(self, v)

    def count(self, x: 'u_trie_with_def_false_bool_data_string') -> "std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::size_type":
        return _pygrape.ust_set_count(self, x)

    def begin(self) -> "std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::iterator":
        return _pygrape.ust_set_begin(self)

    def end(self) -> "std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::iterator":
        return _pygrape.ust_set_end(self)

    def rbegin(self) -> "std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::reverse_iterator":
        return _pygrape.ust_set_rbegin(self)

    def rend(self) -> "std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::reverse_iterator":
        return _pygrape.ust_set_rend(self)

    def erase(self, *args) -> "void":
        return _pygrape.ust_set_erase(self, *args)

    def find(self, x: 'u_trie_with_def_false_bool_data_string') -> "std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::iterator":
        return _pygrape.ust_set_find(self, x)

    def lower_bound(self, x: 'u_trie_with_def_false_bool_data_string') -> "std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::iterator":
        return _pygrape.ust_set_lower_bound(self, x)

    def upper_bound(self, x: 'u_trie_with_def_false_bool_data_string') -> "std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::iterator":
        return _pygrape.ust_set_upper_bound(self, x)

    def equal_range(self, x: 'u_trie_with_def_false_bool_data_string') -> "std::pair< std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::iterator,std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::iterator >":
        return _pygrape.ust_set_equal_range(self, x)

    def insert(self, __x: 'u_trie_with_def_false_bool_data_string') -> "std::pair< std::set< grape::trie_with_def_data_string< unsigned short,::grape::false_func,::grape::false_func::result_type > * >::iterator,bool >":
        return _pygrape.ust_set_insert(self, __x)
    __swig_destroy__ = _pygrape.delete_ust_set
    __del__ = lambda self: None
ust_set_swigregister = _pygrape.ust_set_swigregister
ust_set_swigregister(ust_set)


def ust_set_deref(s: 'std::set< grape::u_trie_with_def_false_bool_data_string *,std::less< grape::u_trie_with_def_false_bool_data_string * >,std::allocator< grape::u_trie_with_def_false_bool_data_string * > > *') -> "std::set< grape::u_trie_with_def_false_bool_data_string *,std::less< grape::u_trie_with_def_false_bool_data_string * >,std::allocator< grape::u_trie_with_def_false_bool_data_string * > > &":
    return _pygrape.ust_set_deref(s)
ust_set_deref = _pygrape.ust_set_deref
class base_inf_delaf_ambiguous_entry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, base_inf_delaf_ambiguous_entry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, base_inf_delaf_ambiguous_entry, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pygrape.base_inf_delaf_ambiguous_entry_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pygrape.base_inf_delaf_ambiguous_entry___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pygrape.base_inf_delaf_ambiguous_entry___bool__(self)

    def __len__(self) -> "std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::size_type":
        return _pygrape.base_inf_delaf_ambiguous_entry___len__(self)

    def __getslice__(self, i: 'std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::difference_type', j: 'std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::difference_type') -> "std::vector< grape::inf_delaf::entry *,std::allocator< grape::inf_delaf::entry * > > *":
        return _pygrape.base_inf_delaf_ambiguous_entry___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pygrape.base_inf_delaf_ambiguous_entry___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::difference_type', j: 'std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::difference_type') -> "void":
        return _pygrape.base_inf_delaf_ambiguous_entry___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pygrape.base_inf_delaf_ambiguous_entry___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::value_type":
        return _pygrape.base_inf_delaf_ambiguous_entry___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pygrape.base_inf_delaf_ambiguous_entry___setitem__(self, *args)

    def pop(self) -> "std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::value_type":
        return _pygrape.base_inf_delaf_ambiguous_entry_pop(self)

    def append(self, x: 'std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::value_type') -> "void":
        return _pygrape.base_inf_delaf_ambiguous_entry_append(self, x)

    def empty(self) -> "bool":
        return _pygrape.base_inf_delaf_ambiguous_entry_empty(self)

    def size(self) -> "std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::size_type":
        return _pygrape.base_inf_delaf_ambiguous_entry_size(self)

    def swap(self, v: 'base_inf_delaf_ambiguous_entry') -> "void":
        return _pygrape.base_inf_delaf_ambiguous_entry_swap(self, v)

    def begin(self) -> "std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::iterator":
        return _pygrape.base_inf_delaf_ambiguous_entry_begin(self)

    def end(self) -> "std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::iterator":
        return _pygrape.base_inf_delaf_ambiguous_entry_end(self)

    def rbegin(self) -> "std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::reverse_iterator":
        return _pygrape.base_inf_delaf_ambiguous_entry_rbegin(self)

    def rend(self) -> "std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::reverse_iterator":
        return _pygrape.base_inf_delaf_ambiguous_entry_rend(self)

    def clear(self) -> "void":
        return _pygrape.base_inf_delaf_ambiguous_entry_clear(self)

    def get_allocator(self) -> "std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::allocator_type":
        return _pygrape.base_inf_delaf_ambiguous_entry_get_allocator(self)

    def pop_back(self) -> "void":
        return _pygrape.base_inf_delaf_ambiguous_entry_pop_back(self)

    def erase(self, *args) -> "std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::iterator":
        return _pygrape.base_inf_delaf_ambiguous_entry_erase(self, *args)

    def __init__(self, *args):
        this = _pygrape.new_base_inf_delaf_ambiguous_entry(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x: 'std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::value_type') -> "void":
        return _pygrape.base_inf_delaf_ambiguous_entry_push_back(self, x)

    def front(self) -> "std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::value_type":
        return _pygrape.base_inf_delaf_ambiguous_entry_front(self)

    def back(self) -> "std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::value_type":
        return _pygrape.base_inf_delaf_ambiguous_entry_back(self)

    def assign(self, n: 'std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::size_type', x: 'std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::value_type') -> "void":
        return _pygrape.base_inf_delaf_ambiguous_entry_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pygrape.base_inf_delaf_ambiguous_entry_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pygrape.base_inf_delaf_ambiguous_entry_insert(self, *args)

    def reserve(self, n: 'std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::size_type') -> "void":
        return _pygrape.base_inf_delaf_ambiguous_entry_reserve(self, n)

    def capacity(self) -> "std::vector< ::grape::inf_delaf::entry *,std::allocator< ::grape::inf_delaf::entry * > >::size_type":
        return _pygrape.base_inf_delaf_ambiguous_entry_capacity(self)
    __swig_destroy__ = _pygrape.delete_base_inf_delaf_ambiguous_entry
    __del__ = lambda self: None
base_inf_delaf_ambiguous_entry_swigregister = _pygrape.base_inf_delaf_ambiguous_entry_swigregister
base_inf_delaf_ambiguous_entry_swigregister(base_inf_delaf_ambiguous_entry)

class inf_delaf_ambiguous_entry(base_inf_delaf_ambiguous_entry):
    __swig_setmethods__ = {}
    for _s in [base_inf_delaf_ambiguous_entry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, inf_delaf_ambiguous_entry, name, value)
    __swig_getmethods__ = {}
    for _s in [base_inf_delaf_ambiguous_entry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, inf_delaf_ambiguous_entry, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygrape.new_inf_delaf_ambiguous_entry()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clear(self) -> "void":
        return _pygrape.inf_delaf_ambiguous_entry_clear(self)
    __swig_destroy__ = _pygrape.delete_inf_delaf_ambiguous_entry
    __del__ = lambda self: None
inf_delaf_ambiguous_entry_swigregister = _pygrape.inf_delaf_ambiguous_entry_swigregister
inf_delaf_ambiguous_entry_swigregister(inf_delaf_ambiguous_entry)

class compressed_delaf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, compressed_delaf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, compressed_delaf, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygrape.new_compressed_delaf()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def get_word_properties(self, word_begin: 'grape::u_array::const_iterator', word_end: 'grape::u_array::const_iterator') -> "grape::const_inf_delaf_ambiguous_entry *":
        return _pygrape.compressed_delaf_get_word_properties(self, word_begin, word_end)
    __swig_destroy__ = _pygrape.delete_compressed_delaf
    __del__ = lambda self: None
compressed_delaf_swigregister = _pygrape.compressed_delaf_swigregister
compressed_delaf_swigregister(compressed_delaf)


def u_read_compressed_delaf(bin_delaf_pathname: 'std::string const &', inf_delaf_pathname: 'std::string const &', dico: 'compressed_delaf') -> "void":
    return _pygrape.u_read_compressed_delaf(bin_delaf_pathname, inf_delaf_pathname, dico)
u_read_compressed_delaf = _pygrape.u_read_compressed_delaf
# This file is compatible with both classic and new-style classes.


